//Sergio Ramirez
//Machine Org
//2.16 Programming exercise
// 1.

#include <unistd.h>
#include <string.h>

int main(void)
{
  char aStr[200];
  char *stringPtr = aStr;

  write(STDOUT_FILENO, "Enter text string: ",
        strlen("Enter text string: "));  

  read(STDIN_FILENO, stringPtr, 1);   
  while (*stringPtr != '\n')          
  {
    stringPtr++;                       
    read(STDIN_FILENO, stringPtr, 1);  
  }

  // now echo for user
  write(STDOUT_FILENO, "You entered:\n",
        strlen("You entered:\n"));
  stringPtr = aString;
  do
  {
    write(STDOUT_FILENO, stringPtr, 1);
    stringPtr++;
  } while (*stringPtr != '\n');
  write(STDOUT_FILENO, stringPtr, 1);

  return 0;
}

//2
#include <stdio.h>
#include <unistd.h>
#include <string.h>

int main(void)
{
  char aStr[200];
  char *stringPtr = aStr;

  write(STDOUT_FILENO, "Enter a text string: ",
        strlen("Enter a text string: ")); 

  read(STDIN_FILENO, stringPtr, 1);    
  while (*stringPtr != '\n')          
  {
    stringPtr++;                       
    read(STDIN_FILENO, stringPtr, 1);  
  }
  *stringPtr = '\0';                   

  // now echo for user
  printf("You entered:\n%s\n", aString);

  return 0;
}

//3
#include "readLn.h"
#include "writeStr.h"
#define STRLEN 200

int main(void)
{
  char aString[STRLEN];  
  writeStr("Enter a text string: ");
  readLn(aString, STRLEN);
  writeStr("You entered:\n");
  writeStr(aString);
  writeStr("\n");

  return 0;
}

/* writeStr.h
 * takes pointer to C-style text string
 * returns number of chars written
 */
 
#ifndef WRITESTR_H
#define WRITESTR_H
int writeStr(char *);
#endif

/* writeStr.c
 * takes pointer to C-style text string
 * returns number of chars written
 */

#include <unistd.h>
#include "writeStr.h"

int writeStr(char *stringAddr)
{
  int count = 0;

  while (*stringAddr != '\0')
  {
    write(STDOUT_FILENO, stringAddr, 1);
    count++;
    stringAddr++;
  }

  return count;
}

/* readLn.h
 * Reads a line from standard in.
 */
 
#ifndef READLN_H
#define READLN_H
int readLn(char *, int);
#endif

/* readLn.c
 * Reads a line from standard in
 */

#include <unistd.h>
#include "readLn.h"

int readLn(char *stringAddr, int maxLength)
{
  int count = 0;
  maxLength--;          // allow space for NUL
  read(STDIN_FILENO, stringAddr, 1);
  while (*stringAddr != '\n')
  {
    if (count < maxLength)
    {
      count++;
      stringAddr++;
    }
    read(STDIN_FILENO, stringAddr, 1);
  }
  *stringAddr = '\0';   // terminate C string
   
  return count;
}