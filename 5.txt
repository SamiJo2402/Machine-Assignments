assignment 5
10.4


1.
        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified       
        .equ    STDOUT,1

        .section  .rodata
        .align  2
helloMsg:
        .asciz	 "Hello, Bob!\n"
        .equ    helloLngth,.-helloMsg

        .text
        .align  2
        .global main
        .type   main, %function
main:
        sub     sp, sp, 8      
        str     fp, [sp, 0]     
        str     lr, [sp, 4]    
        add     fp, sp, 4     

        mov     r0, STDOUT     
        ldr     r1, helloMsgAddr   
        mov     r2, helloLngth 
        bl      write           
        
        mov     r0, 0           
        ldr     fp, [sp, 0]     
        ldr     lr, [sp, 4]    
        add     sp, sp, 8      
        bx      lr              
        
        .align  2
helloMsgAddr:
        .word   helloMsg




10.6

1.
        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified         
        .equ    STDIN,0
        .equ    STDOUT,1
        .equ    char1,-8
        .equ    char2,-7
        .equ    char3,-6
        .equ    char4,-5
        .equ    nChars,4
        .equ    local,8
        .section  .rodata
        .align  2
promptMsg:
        .asciz  "Enter four characters: "
        .equ    promptLngth,.-promptMsg
responseMsg:
        .asciz	"You entered: "
        .equ    responseLngth,.-responseMsg

        .text
        .align  2
        .global main
        .type   main, %function
main:
        sub     sp, sp, 8       
        str     fp, [sp, 0]     
        str     lr, [sp, 4]     
        add     fp, sp, 4      
        sub     sp, sp, local   

        mov     r0, STDOUT      
        ldr     r1, promptMsgAddr
        mov     r2, promptLngth
        bl      write

        mov     r0, STDIN       
        add     r1, fp, char1  
        mov     r2, 1           
        bl      read

        mov     r0, STDIN       
        add     r1, fp, char2   
        mov     r2, 1           
        bl      read

        mov     r0, STDIN       
        add     r1, fp, char3  
        mov     r2, 1          
        bl      read

        mov     r0, STDIN       
        add     r1, fp, char4   
        mov     r2, 1          
        bl      read

        mov     r0, STDOUT    
        ldr     r1, responseMsgAddr
        mov     r2, responseLngth
        bl      write

        mov     r0, STDOUT      
        add     r1, fp, char1  
        mov     r2, nChars      
        bl      write

        mov     r0, 0          
        add     sp, sp, local   
        ldr     fp, [sp, 0]     
        ldr     lr, [sp, 4]     
        add     sp, sp, 8       
        bx      lr             

        .align  2
promptMsgAddr:
        .word   promptMsg
responseMsgAddr:
        .word   responseMsg





12.2
1.

        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified         
        .equ    STDOUT,1
        .equ    numeral,-20
        .equ    local,8

        .section .rodata
        .align  2
        .text
        .align  2
        .global main
        .type   main, %function
main:
        sub     sp, sp, 16      
        str     r4, [sp, 4]     
        str     fp, [sp, 8]     
        str     lr, [sp, 12]    
        add     fp, sp, 12      
        sub     sp, sp, local   

        mov     r4, '0          
loop:
        strb    r4, [fp, numeral]  
                                
        mov     r0, STDOUT      
        add     r1, fp, numeral 
        mov     r2, 1           
        bl      write

        add     r4, r4, 1       
        cmp     r4, '9         
        ble     loop           
        mov     r0, 0           
        add     sp, sp, local   
        ldr     r4, [sp, 4]     
        ldr     fp, [sp, 8]    
        ldr     lr, [sp, 12]    
        add     sp, sp, 16      
        bx      lr             

2.

        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified        
        .equ    STDOUT,1
        .equ    alpha,-20
        .equ    local,8

        .section .rodata
        .align  2
        .text
        .align  2
        .global main
        .type   main, %function
main:
        sub     sp, sp, 16      
        str     r4, [sp, 4]     
        str     fp, [sp, 8]     
        str     lr, [sp, 12]    
        add     fp, sp, 12      
        sub     sp, sp, local   

        mov     r4, 'A          
loop:
        strb    r4, [fp, alpha] 
        mov     r0, STDOUT     
        add     r1, fp, alpha   
        mov     r2, 1           
        bl      write

        add     r4, r4, 1       
        cmp     r4, 'Z          
        ble     loop            

        mov     r0, 0          
        add     sp, sp, local   
        ldr     r4, [sp, 4]     
        ldr     fp, [sp, 8]     
        ldr     lr, [sp, 12]    
        add     sp, sp, 16      
        bx      lr              

12.4
1.
        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified         
        .equ    STDOUT,1
        .equ    STDIN,0
        .equ    NUL,0
        .equ    response,-20
        .equ    local,8

        .section .rodata
        .align  2
prompt:
        .asciz  "Enter a single character: "
        .align  2
numeral:
        .asciz  "You entered a numeral.\n"
        .align  2
other:
        .asciz  "You entered a non-numeric character.\n"
        
        .text
        .align  2
        .global main
        .type   main, %function
main:
        sub     sp, sp, 16      
        str     r4, [sp, 4]     
        str     fp, [sp, 8]    
        str     lr, [sp, 12]    
        add     fp, sp, 12      
        sub     sp, sp, local   

        ldr     r4, promptAddr  
promptLoop:
        ldrb    r3, [r4]       
        cmp     r3, NUL        
        beq     getResponse     

        mov     r0, STDOUT      
        mov     r1, r4          
        mov     r2, 1           
        bl      write

        add     r4, r4, 1       
        b       promptLoop     

getResponse:
        mov     r0, STDIN      
        add     r1, fp, response   
        mov     r2, 2           
        bl      read
        
        ldrb    r3, [fp, response] 
        cmp     r3, '9          
        bhi     notNumeral      
        cmp     r3, '0          
        blo     notNumeral      

        ldr     r4, numeralAddr 
numLoop:
        ldrb    r3, [r4]        
        cmp     r3, NUL         
        beq     endThen         
        mov     r0, STDOUT     
        mov     r1, r4         
        mov     r2, 1           
        bl      write
        add     r4, r4, 1      
        b       numLoop         
endThen:
        b       endElse         

notNumeral:
        ldr     r4, otherAddr   
notNumLoop:
        ldrb    r3, [r4]      
        cmp     r3, NUL       
        beq     endElse         
        mov     r0, STDOUT      
        mov     r1, r4          
        mov     r2, 1         
        bl      write 
        add     r4, r4, 1       
        b       notNumLoop      

endElse:
        mov     r0, 0           
        add     sp, sp, local   
        ldr     r4, [sp, 4]    
        ldr     fp, [sp, 8]     
        ldr     lr, [sp, 12]  
        add     sp, sp, 16      
        bx      lr             

        .align        2
promptAddr:
        .word   prompt
numeralAddr:
        .word   numeral
otherAddr:
        .word   other
