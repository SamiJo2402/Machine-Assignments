assignment 6
13.3

1. The optimized code is more difficult to read

2. 

@ setStr.s 

        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified         
        .equ    STDOUT,1
        .equ    NUL,0

        .text
        .align  2
        .global setStr
        .type   setStr, %function
setStr:
        sub     sp, sp, 16      
        str     r4, [sp, 0]     
        str     r5, [sp, 4]     
        str     fp, [sp, 8]     
        str     lr, [sp, 12]    
        add     fp, sp, 12      

        mov     r4, r0          
        mov     r5, 0           
Strloop:
        ldrb    r3, [r4]        
        cmp     r3, NUL         
        beq     Done         

        mov     r0, STDOUT      
        mov     r1, r4         
        mov     r2, 1          
        bl      write

        add     r4, r4, 1       
        add     r5, r5, 1       
        b       Strloop       
Done:
        mov     r0, r5          
        ldr     r4, [sp, 0]     
        ldr     r5, [sp, 4]     
        ldr     fp, [sp, 8]     
        ldr     lr, [sp, 12]    
        add     sp, sp, 16      
        bx      lr              

@ helloWorld.s
@ test writeStr function

        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified        
        .section .rodata
        .align   2
mainStr:
        .asciz        "Hello World.\n"

        .text
        .align  2
        .global main
        .type   main, %function
main:
        sub     sp, sp, 8       
        str     fp, [sp, 0]     
        str     lr, [sp, 4]    
        add     fp, sp, 4       
        
        ldr     r0, stringAdd
        bl      setStr

        mov     r0, 0          
        ldr     fp, [sp, 0]     
        ldr     lr, [sp, 4]     
        add     sp, sp, 8       
        bx      lr              

stringAdd:
        .word    mainStr

3. 
@ readLn.s

        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified        

        .equ    STDIN,0
        .equ    NUL,0
        .equ    LF,10    

        .text
        .align  2
        .global readLn
        .type   readLn, %function
readLn:
        sub     sp, sp, 16     
        str     r4, [sp, 4]     
        str     r5, [sp, 8]     
        str     fp, [sp, 12]    
        str     lr, [sp, 16]    
        add     fp, sp, 12      

        mov     r4, r0          
        mov     r5, 0          

        mov     r0, STDIN      
        mov     r1, r4         
        mov     r2, 1           
        bl      read
while:
        ldrb    r3, [r4]        
        cmp     r3, LF          
        beq     done
        add     r4, r4, 1       
        add     r5, r5, 1      
        mov     r0, STDIN       
        mov     r1, r4          
        mov     r2, #1          
        bl      read
        b       while     
done:
        mov     r0, NUL        
        strb    r0, [r4]      
        
        mov     r0, r5          
        ldr     r4, [sp, 4]     
        ldr     r5, [sp, 8]     
        ldr     fp, [sp, 12]    
        ldr     lr, [sp, 16]    
        add     sp, sp, 16      
        bx      lr             

@ echoString.s
        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified      
        .equ    nBytes,50  
        .section .rodata
        .align  2
prompt:
        .asciz        "Enter some text: "

        .text
        .align  2
        .global main
        .type   main, %function
main:
        sub     sp, sp, 16     
                                
        str     r4, [sp, 4]     
        str     fp, [sp, 8]    
        str     lr, [sp, 12]    
        add     fp, sp, 12      
        
        mov     r0, nBytes      
        bl      malloc
        mov     r4, r0          

        ldr     r0, setPrompt 
        bl      writeStr
        
        mov     r0, r4          
        bl      readLn
        
        mov     r0, r4         
        bl      writeStr
        
        mov     r0, r4          
        bl      free
        
        mov     r0, 0          
        ldr     r4, [sp, 4]     
        ldr     fp, [sp, 8]     
        ldr     lr, [sp, 12]    
        add     sp, sp, 16      
        bx      lr             

setPrompt
        .word    prompt


4.

@ readLn.s
        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified        

        .equ    STDIN,0
        .equ    NUL,0
        .equ    LF,10    
        .text
        .align  2
        .global readLn
        .type   readLn, %function
readLn:
        sub     sp, sp, 24      
                                
        str     r4, [sp, 4]    
        str     r5, [sp, 8]     
        str     r6, [sp,12]     
        str     fp, [sp, 16]    
        str     lr, [sp, 20]    
        add     fp, sp, 20      

        mov     r4, r0          
        mov     r5, 0           
        mov     r6, r1          
        sub     r6, 1           

        mov     r0, STDIN       
        mov     r1, r4          
        mov     r2, 1          
        bl      read
while:
        ldrb    r3, [r4]        
        cmp     r3, LF          
        beq     done
        cmp     r5, r6         
        bge     ignore         
        add     r4, r4, 1       
        add     r5, r5, 1       
ignore:
        mov     r0, STDIN       
        mov     r1, r4          
        mov     r2, 1          
        bl      read
        b       while      
done
        mov     r0, NUL         
        strb    r0, [r4]       
        
        mov     r0, r5          
        ldr     r4, [sp, 4]     
        ldr     r5, [sp, 8]    
        ldr     r6, [sp,12]     
        ldr     fp, [sp, 16]    
        ldr     lr, [sp, 20]    
        add     sp, sp, 24      
        bx      lr              

@ echoString.s

        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified         
        .equ    nBytes,5 
        .section .rodata
        .align  2
prompt:
        .asciz        "Enter some text: "

        .text
        .align  2
        .global main
        .type   main, %function
main:
        sub     sp, sp, 16      
                                
        str     r4, [sp, 4]    
        str     fp, [sp, 8]     
        str     lr, [sp, 12]    
        add     fp, sp, 12      
        
        mov     r0, nBytes      
        bl      malloc
        mov     r4, r0          

        ldr     r0, setPrompt
        bl      setStr
        
        mov     r0, r4          
        mov     r1, nBytes      
        bl      readLn
        
        mov     r0, r4          
        bl      setStr
        
        mov     r0, r4          
        bl      free
        
        mov     r0, 0           
        ldr     r4, [sp, 4]     
        ldr     fp, [sp, 8]     
        ldr     lr, [sp, 12]    
        add     sp, sp, 16      
        bx      lr              

setPrompt:
        .word    prompt

5.
@ newLn.s

        .cpu    cortex-a53
        .fpu    neon-fp-armv8
        .syntax unified       
        .equ    STDOUT,1

        .section .rodata
        .align   2
mainChar:
        .ascii        "\n"

        .text
        .align  2
        .global newLn
        .type   newLn, %function
newLn:
        sub     sp, sp, 8       
        str     fp, [sp, 0]     
        str     lr, [sp, 4]     
        add     fp, sp, 4       

        mov     r0, STDOUT      
        ldr     r1, setChar
        mov     r2, 1           
        bl      write

        mov     r0, 0           
        ldr     fp, [sp, 0]     
        ldr     lr, [sp, 4]     
        add     sp, sp, 8       
        bx      lr              

setChar:
        .word   mainChar











